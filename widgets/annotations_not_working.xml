<Module>
<ModulePrefs title="Annotate" description="Add annotation in Sevianno" author="Petru Nicolaescu, Chair of Computer Science 5, RWTH Aachen University, Germany" author_email="nicolaescu@dbis.rwth-aachen.de">
<Require feature="dynamic-height" />
</ModulePrefs>
<Content type="html"><![CDATA[

<link type="text/css" rel="stylesheet" href="https://rawgithub.com/DadaMonad/sevianno/master/widgets/css/sevianno-style.css"></style>
<!--script src="https://raw.github.com/nicolaescu/widgetbundles/master/libraries/jquery/jquery-1.5.1.min.js"></script-->
<script type="application/javascript" src="https://rawgithub.com/DadaMonad/sevianno/master/widgets/js/jquery-1.10.2.js"></script>
<script type="application/javascript" src="https://rawgithub.com/DadaMonad/sevianno/master/widgets/js/jquery-ui-1.10.4.custom.js"></script>
<script type="application/javascript" src="https://rawgithub.com/DadaMonad/sevianno/master/widgets/js/sevianno-draggable.js"></script>

<script src="http://open-app.googlecode.com/files/openapp.js"></script>
<script src="https://role-project.svn.sourceforge.net/svnroot/role-project/trunk/libraries/iwc/src/main/javascript/iwc.js"></script>
    
<script src="http://role-is.dbis.rwth-aachen.de/lib/container/json2.js"></script> 
<script src="http://dbis.rwth-aachen.de/gadgets/lib/las/storage.js"></script> 
<script src="http://dbis.rwth-aachen.de/gadgets/lib/las/lasAjaxClient.js"></script> 


<script src="https://rawgithub.com/DadaMonad/sevianno/master/widgets/scripts/prototype.js"</script>
<script src="https://rawgithub.com/DadaMonad/sevianno/master/widgets/scripts/effects.js"</script> 

 <script src="http://www.google.com/jsapi" type="text/javascript"></script>
 <script src="http://dbis.rwth-aachen.de/~nicolaescu/fw/widget/jwplayer/jwplayer.js" type="text/javascript"></script>
   
 <script src="http://dl.dropbox.com/u/82585838/DUIClient.js"></script>
 
 <script type="text/javascript">
 
 var TAG = "Annotations Widget";
 var iwcClient;
 var lasurl = "http://steen.informatik.rwth-aachen.de:9914/";

 // var lasurl = "http://gentileschi.informatik.rwth-aachen.de:9914/";
 var appCode = "vc"; 
 var duiClient;
 var allowSendGetLasInfo = true;
 var isMig = false;
 var videourl;
 var ids;
 var allocations;
 var uniqueTimepoints;
 var uniqueDurations;
 var checkUpdateSemantics;
 var updateIndex;
 var updateSemantic;


 var videoDescription;
 var videoKeywords;
 
 
 
 var lasFeedbackHandler = function(statusCode, message) { 
 switch(statusCode) { 
 case Enums.Feedback.Success: 
 case Enums.Feedback.Error: 
 case Enums.Feedback.PingError: 
 case Enums.Feedback.InvocationSuccess: 
 case Enums.Feedback.InvocationWorking:
 
 case Enums.Feedback.InvocationAbort: 
 case Enums.Feedback.InvocationError: 
 case Enums.Feedback.Success: 
 // ignore above 
 break; 
 case Enums.Feedback.LoginSuccess: 
 onLogin();
 
 if (isMig){
 isMig = false;
 if (videourl != null){
 serviceName= "mpeg7_multimediacontent_service";

 methodName ="getAudioVisualSegments";
 parametersAsJSONArray = new Array();
 parametersAsJSONArray[0] = {"type": "String", "value": videourl};
 lasClient.invoke(serviceName, methodName, parametersAsJSONArray, getAudioVisualSegmentsHandler);
 }
 }

//	document.getElementById("output").innerHTML = message + "SESSION ID is: " + lasClient.getSessionId(); 
 //maximize();
 break; 
 case Enums.Feedback.LogoutSuccess:
 onLogout();
 //	minimize();
 break; 
 case Enums.Feedback.LoginError: alert("Login failed! Message: " + message); 
 //document.getElementById("output").innerHTML = message; 


 break; 
 case Enums.Feedback.LogoutError: alert("Logout failed! Message: " + message); 
 //document.getElementById("output").innerHTML = message; 
 break; 
 case Enums.Feedback.Warning: 
 case Enums.Feedback.PingSuccess: 
 // just ignoring this one... 
 break; 
 default: 
 //ignore it.... 
 break; 
 } 

 
 console.log("Feedback: " + statusCode + ", " + message); 
 
 }; 
 
 var lasClient = new LasAjaxClient("sevianno",lasFeedbackHandler); 
 
 
 
 
 function init(){
 //iwcClient = new iwc.Client(["*"]);
 

//iwcClient.connect(iwcCallback);
 //minimize()
 
 //-----------------------------------------------------------------------------------keli	 
 duiClient = new DUIClient();
 duiClient.connect(iwcCallback);
 duiClient.finishMigration = onFinishMig;
 duiClient.getWidgetState = getState;

 //	duiClient.prepareMigration
 //	duiClient.changeWithApp
 duiClient.updateState = onUpdateState;
 
 /*
 window.onload = window.onresize = function(){
 var width = $(window).width - 5;
 $("#container").width(width);
 }
 */
 //----------------------

//---------------------------------------------------------------
 // Title tag
 $(".title").click(function() 
 {
 
 var titleid = $(this).attr("id");
 var sid=titleid.split("title"); // Splitting eg: title21 to 21
 var id=sid[1];
 var parent = $(this).parent();

//$(this).hide();
 $("#formbox"+id).show();
 return false;
 });
 $(".baseType").click(function() 
 {
 $("#baseTypeCreationContainer").html("");
 
 $('.baseType').css('color', '');
 $(this).css('color', 'red');
 //call the video widget, pause the player and get current time


 var intent = {
 "component":"",	 
 "action":"ACTION_ANNOTATIONS_GET_TIME_PAUSE",
 "data":"www.example.org",
 "dataType":"text/html",
 "flags":["PUBLISH_GLOBAL"]
 };
 sendIntent(intent);
 
 
 var titleid = $(this).attr("id");


 var sid=titleid.split("baseType"); // Splitting eg: title21 to 21
 var id=sid[1];
 var parent = $(this).parent();
 $("#baseTypeCreationContainer").append($("#baseTypeformbox"+id).html());
 
 
 return false;
 });
 
 // Cancel Button


 $(".cancel").click(function() 
 {
 var A=$(this).parent().parent();
 var X= A.attr("id");
 var d=X.split("formbox");
 var id=d[1];
 $("#title"+id).show();
 A.hide();
 return false;
 });
 
 //------------------------------------------------------------------------

//-----------keli	 
 duiClient.initOK();
 //-------------------------------------------------------------------------------------
 
 lasClient.verifyStatus();
 if (lasClient.getStatus() != "loggedIn") {
 onLogout();
 }	
 
 }
 
 //-------------------------------------------

//-----------------------------------------keli
 var onUpdateState = function(intent){
 var appStates = null;
 if (typeof intent.extras.appStates != "undefined"){
 appStates = intent.extras.appStates;
 if (typeof appStates.videourl != "undefined" && videourl != appStates.videourl){

videourl = appStates.videourl;
 isMig = true;
 if (lasClient.getStatus() == "loggedIn"){
 isMig = false;
 if (videourl != null){
 serviceName= "mpeg7_multimediacontent_service";
 methodName ="getAudioVisualSegments";
 parametersAsJSONArray = new Array();

parametersAsJSONArray[0] = {"type": "String", "value": videourl};	 
 lasClient.invoke(serviceName, methodName, parametersAsJSONArray, getAudioVisualSegmentsHandler);
 }
 return;
 }
 }
 }
 if (lasClient.getStatus() != "loggedIn" && allowSendGetLasInfo){

var lasIntent = {
 "action": "GET_LAS_INFO",
 "component": "",
 "data": "",
 "dataType": "",
 };
 duiClient.publishToUser(lasIntent);
 }
 };
 
 var onFinishMig = function(intent){
 var states = intent.extras.widgetStates;
 videourl = states.videourl;

isMig = true;
 if (lasClient.getStatus() == "loggedIn"){
 isMig = false;
 if (videourl != null){
 serviceName= "mpeg7_multimediacontent_service";
 methodName ="getAudioVisualSegments";
 parametersAsJSONArray = new Array();
 parametersAsJSONArray[0] = {"type": "String","value": videourl};	

 
 lasClient.invoke(serviceName, methodName, parametersAsJSONArray, getAudioVisualSegmentsHandler);
 }
 }
 else if (allowSendGetLasInfo){
 var lasIntent = {
 "action": "GET_LAS_INFO",
 "component": "",
 "data": "",
 "dataType": "",
 };

duiClient.publishToUser(lasIntent);
 }
 };
 
 var getState = function(isForMig){
 var state = {
 "videourl": videourl
 };
 return state;
 };
 //---------------------------------------------------------------------------------------
 
 function iwcCallback(intent){

console.log(TAG+"********************************************");
 console.log(intent);
 console.log("********************************************");
 
 
 if(intent.action == "ACTION_RESPONSE_SEND_TIME" && intent.dataType == "text/html" ){
 
 currentTime = intent.extras.position;

 console.log("received get current time event");
 
 $("#PlayerPosition").html("");
 $("#PlayerPosition").html("<p style=\"color:red\">Position: "+currentTime+"</p>");
 $("#playerDurationStartTimeVar").val(parseInt(currentTime));
 }
 




if(intent.action == "ACTION_RESPONSE_SEND_ANNOTATION_END_TIME" && intent.dataType == "text/html" ){
 
 endTime = intent.extras.endTime;
 console.log("received end time "+endTime);
 startTime = $("#playerDurationStartTimeVar").val();
 console.log("start time "+startTime);
 
 

if (endTime>=startTime){
 $("#annotationDuration").val(endTime-startTime);
 }
 else{
 $("#annotationDuration").val(0);
 }
 
 
 }
 
 if (intent.action=="ACTION_SEND_VECTORS_FOR_ADDING_CONCEPTS" && intent.dataType == "text/html" ){

videourl = intent.extras.videourl;
 ids = intent.extras.ids;
 allocations = intent.extras.allocations;
 uniqueTimepoints = intent.extras.uniqueTimepoints;
 uniqueDurations = intent.extras.uniqueDurations;
 
 console.log("videourl = "+videourl);
 console.log("ids = "+ids);


 console.log("time "+uniqueTimepoints);
 console.log("durations "+uniqueDurations);
 console.log("allocations "+allocations);
 
 
 getMediaDescriptionFunction(videourl);
 getMediaTagsFunction(videourl);
 getMediaTitleFunction(videourl);
 }

if (intent.action=="SAVE_PLACETYPE" && intent.dataType == "text/html" ){
 //	alert("save placetype intent");
 var placeData = intent.extras;
 
 var placetypeStartTimePos = placeData.startTime;
 var placeTypeDurationInSeconds = placeData.durationInSeconds;
 var placetypeName = placeData.Name;
 

 var placetypeId = placeData.id ;
  var userName = lasClient.getUsername();
 
 addAnnotationsSegment(placetypeId,""+Math.floor(placetypeStartTimePos),""+Math.floor(placeTypeDurationInSeconds),"SemanticPlace",placetypeName,userName);
 
 
 
 
 }
 
 // code changed by srivatsan to support deletion of a single annotation
 
 if(intent.action == "ACTION_DELETE_ANNOTATIONS" && intent.dataType == "text/html" ){
 var index = intent.extras.index;
 var semantic = intent.extras.semantic;
 removeAnnotationsSegment(index,semantic);
 console.log("GREAT WORK SRI");
 
}
    
    
//code for update annotations
    
    if(intent.action == "ACTION_UPDATE_ANNOTATIONS" && intent.dataType == "text/html" ){
    
    
    updateIndex = intent.extras.index;
    updateSemantic = intent.extras.semantic;
    var annotationType = intent.extras.type;
    //console.log(index);
    //console.log(semantic);
    console.log(annotationType);
    
    //if(annotationType == "AgentObject")
    //{
    console.log("inside action update, agent object")
    serviceName= "mpeg7_semanticbasetype_service";
    methodName ="getAgentObjectType";
    parametersAsJSONArray = new Array();
    parametersAsJSONArray[0] = {"type": "String","value": updateSemantic};
    lasClient.invoke(serviceName, methodName, parametersAsJSONArray, updateAudioVisualSegmentsConcept);
    //}
    if(annotationType == "Concept")
    {
    serviceName= "mpeg7_semanticbasetype_service";
    methodName ="getConceptType";
    parametersAsJSONArray = new Array();
    parametersAsJSONArray[0] = {"type": "String","value": semantic};
    lasClient.invoke(serviceName, methodName, parametersAsJSONArray, updateAudioVisualSegmentsConcept);
    }
    if(annotationType == "Event")
    {
    serviceName= "mpeg7_semanticbasetype_service";
    methodName ="getEventType";
    parametersAsJSONArray = new Array();
    parametersAsJSONArray[0] = {"type": "String","value": semantic};
    lasClient.invoke(serviceName, methodName, parametersAsJSONArray, updateAudioVisualSegmentsConcept);
    }
    if(annotationType == "Object")
    {
    serviceName= "mpeg7_semanticbasetype_service";
    methodName ="getObjectType";
    parametersAsJSONArray = new Array();
    parametersAsJSONArray[0] = {"type": "String","value": semantic};
    lasClient.invoke(serviceName, methodName, parametersAsJSONArray, updateAudioVisualSegmentsConcept);
    }
    
    console.log("GREAT WORK SRI");
    
    }
 
 //-------------------------------------------------------------------------------------keli	 
 if (intent.action == "LAS_INFO"){
 console.log("addannotations: LAS_INFO.");
 allowSendGetLasInfo = false;
 if (lasClient.getStatus() != "loggedIn" && intent.extras != null && intent.extras.userName != null && intent.extras.session != null)
 lasClient.setCustomSessionData(intent.extras.session, intent.extras.userName, lasurl, appCode);
 return;
 }
 if (intent.action == "GET_LAS_INFO")
 allowSendGetLasInfo = false;
 
 if (intent.action == "ACTION_LOGOUT"){
 lasClient.logout();
 allowSendGetLasInfo = true;
 }	
 if (intent.action == "RESTORE_LAS_SESSION"){
 if (lasClient.getStatus() == "loggedIn"){
 var userName = lasClient.getUsername();
 var sessionId = lasClient.getSessionId();
 var sessionInfo = {
 "userName": userName,
 "session": sessionId
 };
 var resIntent = {
 "action": "LAS_SESSION",
 "component": "",
 "data": "",
 "dataType": "",
 "extras": sessionInfo
 };
 duiClient.publishToUser(resIntent);
 }
 }
 
 if(intent.action == "ACTION_OPEN" && intent.dataType == "video/mp4" && intent.data != null){
 videourl = intent.data;
 isMig = true;
 if (lasClient.getStatus() == "loggedIn"){
 isMig = false;
 serviceName= "mpeg7_multimediacontent_service";
 methodName ="getAudioVisualSegments";
 parametersAsJSONArray = new Array();
 parametersAsJSONArray[0] = {"type": "String", "value": videourl};	 
 lasClient.invoke(serviceName, methodName, parametersAsJSONArray, getAudioVisualSegmentsHandler);
 }
 else if (allowSendGetLasInfo){
 var lasIntent = {
 "action": "GET_LAS_INFO",
 "component": "",
 "data": "",
 "dataType": "",
 };
 duiClient.publishToUser(lasIntent);
 }
 }
 
 //------------------------------------------------------------------------------------------
 }
 
 
 function sendIntent(intent) {
 if(iwc.util.validateIntent(intent)) {
 duiClient.sendIntent(intent);
 }
 else {
 alert("Intent not valid!");
 }
 }
 
 //function which sends playIntend to video widget
 function sendPlayIntend(){
 var intent = {
 "component":"",	 
 "action":"ACTION_START_VIDEO",
 "data":"www.example.org",
 "dataType":"text/html",
 "flags":["PUBLISH_GLOBAL"]
 };
 sendIntent(intent);
 
 }
 
 
 //function called when cancelling addition of base types
 function clearBaseTypeDiv(){
 document.getElementById("baseTypeCreationContainer").innerHTML="";
 $("#PlayerPosition").html("");
 $('.baseType').css('color', '');
 sendPlayIntend();
 }
 
 function getMediaDescriptionFunction(videourl){
 serviceName= "mpeg7_multimediacontent_service";
 methodName3 = "getMediaTextAnnotation";
 //uploader = "uploader"
 parametersAsJSONArray = new Array();
 parametersAsJSONArray[0] ={"type": "String", "value": videourl};
 console.log("GOT Keyword description");	 
 lasClient.invoke(serviceName, methodName3, parametersAsJSONArray, function(status,result){
 videoDescription= result.value;
 
 $("#title1").text(""+videoDescription);
 $("#editableDescription").text(""+videoDescription);
 
 }) ; 
 
 }
 
 function getMediaTitleFunction(videourl){
 serviceName= "mpeg7_multimediacontent_service";
 methodName3 = "getMediaCreationTitle";
 //uploader = "uploader"
 parametersAsJSONArray = new Array();
 parametersAsJSONArray[0] ={"type": "String", "value": videourl};
 console.log("GOT Keyword description");	 
 lasClient.invoke(serviceName, methodName3, parametersAsJSONArray, function(status,result){
 videoDescription= result.value;
 
 $("#title3").text(""+videoDescription);
 $("#editableTitle").text(""+videoDescription);
 
 }) ; 
 
 }
 
 
 function changeTitleTags(){
 var newTitle = $("#editableTitle").val();
 
 serviceName= "mpeg7_multimediacontent_service";
 methodName3 = "setMediaCreationTitle";
 //uploader = "uploader"
 parametersAsJSONArray = new Array();
 parametersAsJSONArray[0] ={"type": "String", "value": videourl};
 parametersAsJSONArray[1] ={"type": "String", "value": newTitle};
 console.log("SET MEDIA description");	 
 lasClient.invoke(serviceName, methodName3, parametersAsJSONArray, function(status,result){
 
 if(status==200){
 
 
 $("#title3").text(""+newTitle);
 $("#editableTitle").text(""+newTitle);
 $("#formbox3").hide();
 
 }
 else{
 alert("Failed to add the new description");
 $("#editableTitle").text($("#title3").text());
 }
 }) ; 
 }
 
 
 
 function changeMediaDescription(){
 var newDescription = $("#editableDescription").val();
 
 serviceName= "mpeg7_multimediacontent_service";
 methodName3 = "setMediaTextAnnotation";
 //uploader = "uploader"
 parametersAsJSONArray = new Array();
 parametersAsJSONArray[0] ={"type": "String", "value": videourl};
 parametersAsJSONArray[1] ={"type": "String", "value": newDescription};
 console.log("SET MEDIA description");	 
 lasClient.invoke(serviceName, methodName3, parametersAsJSONArray, function(status,result){
 
 if(status==200){
 
 
 $("#title1").text(""+newDescription);
 $("#editableDescription").text(""+newDescription);
 $("#formbox1").hide();
 
 }
 else{
 alert("Failed to add the new description");
 $("#editableDescription").text($("#title1").text());
 }
 }) ; 
 }
 
 function changeMediaTags(){
 var newTagsText = $("#editableTags").val();
 var newTags = newTagsText.split(",");
 
 serviceName= "mpeg7_multimediacontent_service";
 methodName3 = "setMediaKeywords";
 //uploader = "uploader"
 parametersAsJSONArray = new Array();
 parametersAsJSONArray[0] ={"type": "String", "value": videourl};
 parametersAsJSONArray[1] ={"type": "String[]", "value": newTags};
 console.log("SET Keyword description");	 
 lasClient.invoke(serviceName, methodName3, parametersAsJSONArray, function(status,result){
 
 if(status==200){
 
 
 $("#title2").text(""+newTagsText);
 $("#editableTags").text(""+newTagsText);
 $("#formbox2").hide();
 }
 else{
 alert("Failed to add the new keywords");
 $("#editableTags").text($("#title2").text());
 }
 }) ; 
 }
 
 //function handlerMediaTagsFunction(status) 
 
 function getMediaTagsFunction(videourl){
 serviceName= "mpeg7_multimediacontent_service";
 methodName3 = "getMediaKeywords";
 //uploader = "uploader"
 parametersAsJSONArray = new Array();
 parametersAsJSONArray[0] ={"type": "String", "value": videourl};
 console.log("GOT Keyword description");	 
 lasClient.invoke(serviceName, methodName3, parametersAsJSONArray, function(status,result){
 videoKeywords= result.value;
 
 $("#title2").text(""+videoKeywords);
 if((""+videoKeywords) == "")
 	$("#title2").html("&nbsp&nbsp&nbsp&nbsp&nbsp");
 $("#editableTags").text(""+videoKeywords);
 }) ; 
 
 }
 
 
 function getTimeFromPos(pos){
 if (pos>3600){
 hour = Math.floor(pos/3600);
 mins = 0;
 secs = 0;
 secs = pos%3600;
 if (secs>=60){
 mins = Math.floor(secs/60);
 secs = secs%60;
 }
 if (hour<10){
 hour = "0"+hour;
 }
 if (mins<10){
 mins = "0"+mins;
 }
 if (secs<10){
 secs= "0"+secs;
 }
 time = hour+":"+mins+":"+secs;
 
 }
 else{
 mins = Math.floor(pos/60);
 secs = pos%60;
 
 if (mins<10){
 mins = "0"+mins;
 }
 if (secs<10){
 secs= "0"+secs;
 }
 time = mins+":"+secs;
 
 }
 return time;
 }
 
 function computeEndTime(startTime,durationH,durationM,durationS){
 var startTimeElems = startTime.split(":");
 
 if ((startTimeElems[0]).substr(0,1)=="0"){
 startTimeElems[0] = (startTimeElems[0]).substr(1);
 }
 if ((startTimeElems[1]).substr(0,1)=="0"){
 startTimeElems[1] = (startTimeElems[1]).substr(1);
 }
 
 if ((durationH).substr(0,1)=="0" && durationH.length>1){
 durationH = (durationH).substr(1);
 }
 if ((durationM).substr(0,1)=="0" && durationM.length>1){
 durationM = (durationM).substr(1);
 }
 if ((durationS).substr(0,1)=="0" && durationS.length>1){
 durationS = (durationS).substr(1);
 }
 
 if (startTimeElems.length==3){
 if ((startTimeElems[2]).substr(0,1)=="0"){
 startTimeElems[2] = (startTimeElems[2]).substr(1);
 }
 
 endTimeSeconds = 3600*(parseInt(startTimeElems[0])+parseInt(durationH))+60*(parseInt(startTimeElems[1])+parseInt(durationM))+parseInt(startTimeElems[2])+parseInt(durationS);
 }
 else{
 endTimeSeconds = 60*(parseInt(startTimeElems[0])+parseInt(durationM))+parseInt(startTimeElems[1])+parseInt(durationS);
 }
 return getTimeFromPos(endTimeSeconds);
 
 
 
 }
 
 
 
 
 //srivatsan's magic code to delete it directly from here
 
 function removeAnnotationsSegment(index,semantic)
 {//begining of function loop
 //id is the id of the semantic base type
 //start time is a number which represents the number of seconds since the start of the video
 //durationInSeconds is a number which represents the duration
 //index is the row index for deletion of the row 
 
 var tempIds = new Array();
 var tempAllocations = new Array();
 var tempUniqueTimepoints = new Array();
 var tempUniqueDurations = new Array();
 var tempIds1 = new Array();
 var tempAllocations1 = new Array();
 var tempUniqueTimepoints1 = new Array();
 var tempUniqueDurations1 = new Array();
 tempIds = ids;
 tempAllocations = allocations;
 tempUniqueTimepoints = uniqueTimepoints;
 tempUniqueDurations = uniqueDurations;
 tempUniqueTimepoints1 = uniqueTimepoints;
 tempAllocations1 = allocations;
 console.log(ids);
 console.log(allocations);
 console.log(uniqueTimepoints);
 console.log(uniqueDurations);
 
 index = index - 1;
 var foundIdenticalTimepoint = false;
 if (tempUniqueTimepoints!= null && tempUniqueTimepoints!="undefined" && tempUniqueTimepoints.length!=0)
 {
 console.log("temp unique points: " + tempUniqueTimepoints);
 console.log("index" + index);
 console.log("tempAllocations" + tempAllocations);
 jQuery.each(tempIds, function(indexUT,valueUT) 
 {
 // begining of jquery loop
 if(valueUT == semantic)
 {
 // checking value is equal to semantics
 console.log("value is equal to semantic =  "+ semantic);
 if(indexUT != (tempAllocations.length-1))
 {// checking if it is the last element of the array
 console.log("value is not the last element of the table " + (tempAllocations.length-1));
 if(indexUT != 0)
 {// check if it the first element of the array
 console.log("its not the first element either");
 if (tempAllocations[indexUT] == tempAllocations[indexUT + 1] || tempAllocations[indexUT] == tempAllocations[indexUT - 1])
 {// checking if allocations of previous element or current element are same
  //tempUniqueTimepoints1.splice(tempAllocations[indexUT],1);
 //tempUniqueDurations.splice(tempAllocations[indexUT],1);
 //tempAllocations1[indexUT + 1] = tempAllocations1[indexUT];
 console.log("inside either equal to one before or one after");
 tempIds.splice(indexUT,1);
 //tempAllocations1 = reOrderAllocations(tempAllocations,indexUT);
 tempAllocations1.splice(indexUT,1);
 }
 else
 {
 console.log(" temp allocation is unique = " + tempAllocations[indexUT]);
 tempAllocations1 = reOrderAllocations(tempAllocations,indexUT);
 tempUniqueTimepoints1.splice(indexUT,1);
 tempUniqueDurations.splice(indexUT,1);
 tempIds.splice(indexUT,1);
 //tempAllocations1.splice(indexUT,1);
 
 }
 }// end of for except first element
 else
 {// for first element
 if (tempAllocations[indexUT] != tempAllocations[indexUT + 1])
 {// checking if allocations of current element and next element are different
 console.log(" items are not not equal to " + tempAllocations[indexUT + 1]);
 //tempAllocations1[indexUT + 1] = tempAllocations1[indexUT];
 tempAllocations1 = reOrderAllocations(tempAllocations,indexUT);
 tempUniqueTimepoints1.splice(indexUT,1);
 tempUniqueDurations.splice(indexUT,1);
 tempIds.splice(indexUT,1);
 //tempAllocations1.splice(indexUT,1);
 }
 else
 {
 //tempUniqueTimepoints1.splice(tempAllocations[indexUT],1);
 //tempUniqueDurations.splice(tempAllocations[indexUT],1);
 //tempAllocations1[indexUT + 1] = tempAllocations1[indexUT];
 tempIds.splice(indexUT,1);
 tempAllocations1.splice(indexUT,1);
 }
 }// for first element ends here
 }//end of checking if index id is not greater than the total allocations we hav
 else
 {
 //tempAllocations1[indexUT + 1] = tempAllocations1[indexUT];
 if (tempAllocations[indexUT] != tempAllocations[indexUT - 1])
 {
 tempUniqueTimepoints1.splice(tempAllocations[indexUT],1);
 tempUniqueDurations.splice(tempAllocations[indexUT],1);
 tempIds.splice(indexUT,1);
 tempAllocations1.splice(indexUT,1);
 }
else
{
tempIds.splice(indexUT,1);
tempAllocations1.splice(indexUT,1);
} 
}
 console.log("end of if");
 }//end of value= semantics
 
 }//end of jquery
 );//end of jquery bracket
 	 
 
 tempAllocations = tempAllocations1;
 tempUniqueTimepoints = tempUniqueTimepoints1;
 console.log(tempIds);
 console.log(tempAllocations);
 console.log(tempUniqueDurations);
 console.log(tempUniqueTimepoints);
 
 
 serviceName= "mpeg7_multimediacontent_service";
 //methodName ="setAudioVisualSegmentsWithDuration";
 methodName ="setAudioVisualSegments";
 parametersAsJSONArray = new Array();
 parametersAsJSONArray[0] = {"type": "String", "value": videourl};
 parametersAsJSONArray[1] = {"type": "String[]", "value": tempIds};
 parametersAsJSONArray[2] = {"type": "String[]", "value": tempAllocations};
 parametersAsJSONArray[3] = {"type": "String[]", "value": tempUniqueTimepoints};
 //parametersAsJSONArray[4] = {"type": "String[]", "value": tempUniqueDurations};
 
 lasClient.invoke(serviceName, methodName, parametersAsJSONArray, function(status,result){
 
 if (status==200){
 console.log("invokation successful");
 checkUpdateSemantics = 0;
 ids = tempIds;
 allocations = tempAllocations;
 uniqueTimepoints = tempUniqueTimepoints;
    
    
    intent = {
    "component":"",
    "action":"ACTION_END_TABLE_MODIFICATION",
    "data":"www.example.org",
    "dataType":"text/html",
    "flags":["PUBLISH_GLOBAL"]
    };
    sendIntent(intent);
 
 }
 console.log("ids allocations uniqueTimepoints");
 console.log(ids);
 console.log(allocations);
 console.log(uniqueTimepoints);
 return false;	
 });
 
 }//end of checking
 }//end of function
 
 
 
function reOrderAllocations(sourceAllocation,deleteIndex){
 
var tempAllocations = new Array();
tempAllocations = sourceAllocation;
console.log("inside new");
console.log(deleteIndex);
jQuery.each(sourceAllocation, function(indexUT,valueUT) 
{
if(indexUT >= deleteIndex && indexUT < (sourceAllocation.length-1))
{
console.log("index=" + indexUT);
tempAllocations[indexUT + 1] = valueUT;
}
})
console.log("temp allocations" + tempAllocations);
tempAllocations.splice(deleteIndex,1);
return tempAllocations; 
}
 
 
 
 // srivatsan's magic code ends here
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 function addAnnotationsSegment(id,startTimePos,durationInSeconds,type,description,author){
 //id is the id of the semantic base type
 //start time is a number which represents the number of seconds since the start of the video
 //durationInSeconds is a number which represents the duration
 
 var startTime = getTimeFromPos(Math.floor(startTimePos));
 
 
 var endTime = computeEndTime(startTime,"0","0",(Math.floor(durationInSeconds))+"");
 startTimeInRequiredFormat = getTimeElementFromPos("startTime",startTimePos);
 durationInRequiredFormat = getTimeElementFromPos("duration",durationInSeconds);
 
 var tempIds = new Array();
 var tempAllocations = new Array();
 var tempUniqueTimepoints = new Array();
 var tempUniqueDurations = new Array();
 
 tempIds = ids;
 tempAllocations = allocations;
 tempUniqueTimepoints = uniqueTimepoints;
 tempUniqueDurations = uniqueDurations;
 
 console.log("printing elements from array");
 console.log(tempAllocations);
 console.log(tempUniqueTimepoints);
 console.log(tempUniqueDurations);
 
 
 tempIds.push(id);
 
 
 
 var foundIdenticalTimepoint = false;
 if (tempUniqueTimepoints!= null && tempUniqueTimepoints!="undefined" && tempUniqueTimepoints.length!=0){
 jQuery.each(tempUniqueTimepoints, function(indexUT,valueUT) {
 if (valueUT == startTimeInRequiredFormat){
 foundIdenticalTimepoint = true;
 tempAllocations.push(indexUT);
 }
 
 });
 }	 
 if (!foundIdenticalTimepoint){
 tempUniqueTimepoints.push(startTimeInRequiredFormat);
 tempUniqueDurations.push(durationInRequiredFormat);
 tempAllocations.push(tempUniqueTimepoints.length-1);
 
 }
 
 
 
 serviceName= "mpeg7_multimediacontent_service";
 //methodName ="setAudioVisualSegmentsWithDuration";
 methodName ="setAudioVisualSegments";
 parametersAsJSONArray = new Array();
 parametersAsJSONArray[0] = {"type": "String", "value": videourl};
 parametersAsJSONArray[1] = {"type": "String[]", "value": tempIds};
 parametersAsJSONArray[2] = {"type": "String[]", "value": tempAllocations};
 parametersAsJSONArray[3] = {"type": "String[]", "value": tempUniqueTimepoints};
 //parametersAsJSONArray[4] = {"type": "String[]", "value": tempUniqueDurations};
 
 lasClient.invoke(serviceName, methodName, parametersAsJSONArray, function(status,result){
 
 if (status==200){
 console.log("inside status successfful");
 ids = tempIds;
 allocations = tempAllocations;
 uniqueTimepoints = tempUniqueTimepoints;
 
 
 //send intent to add the new annotation in the annotations table
 
 var intent;
 if (type=="SemanticPlace"){
 intent = {
 "component":"",	 
 "action":"ACTION_ADD_NEW_PLACE_ANNOTATION_TO_TABLE",
 "data":"www.example.org",
 "dataType":"text/html",
 "flags":["PUBLISH_GLOBAL"],
 "extras":{"id":id,"startTime":startTime,"endTime":endTime,"description":description,"type":type,"author":author}
 };
 }
 else{
 intent = {
 "component":"",	 
 "action":"ACTION_ADD_NEW_ANNOTATION_TO_TABLE",
 "data":"www.example.org",
 "dataType":"text/html",
 "flags":["PUBLISH_GLOBAL"],
 "extras":{"id":id,"startTime":startTime,"endTime":endTime,"description":description,"type":type,"author":author}
 };
 
 
 }
 sendIntent(intent);
 
 
 }
 console.log("ids allocations uniqueTimepoints");
 console.log(ids);
 console.log(allocations);
 console.log(uniqueTimepoints);
 return false;	
 });
 
 }
 
 
 
 
 
 
 function addAgentType(){
 
   
 
 firstName = $("#firstNameAgent").val();
 lastName = $("#lastNameAgent").val();
 //email = $("#emailAgent").val();
    console.log(checkUpdateSemantics);
    
 serviceName= "mpeg7_semanticbasetype_service";
 methodName ="addNewAgentObjectType";
 parametersAsJSONArray = new Array();
 parametersAsJSONArray[0] = {"type": "String", "value": firstName};
 parametersAsJSONArray[1] = {"type": "String", "value": lastName};
 parametersAsJSONArray[2] = {"type": "String", "value": ""};
 
 
 
 
 
 lasClient.invoke(serviceName, methodName, parametersAsJSONArray, function(status,result){
 
 console.log(result.value);
 var id = result.value;
 
 var durationInSeconds = $("#annotationDuration").val();
 var startTime = $("#playerDurationStartTimeVar").val();
 //close the div
 var userName = lasClient.getUsername();
 var check = addAnnotationsSegment(id,startTime,durationInSeconds,"AgentObjectType",firstName+" "+lastName,userName);
if(check == true){
 clearBaseTypeDiv();
 }
 return false;
 
 });
    if(checkUpdateSemantics == 1)
    {
    removeAnnotationsSegment(updateIndex,updateSemantic);
    document.getElementById("baseType2").disabled = true;
    document.getElementById("baseType3").disabled = true;
    document.getElementById("baseType4").disabled = true;
    clearBaseTypeDiv();
    $("updateAlert").fadeIn("slow");
    $("updateAlert").fadeOut("slow");
    }
    
 clearBaseTypeDiv();
 return false;
 }
 
 
 
 
 function addConceptType(){
 conceptName = $("#conceptName").val();
 conceptDescription = $("#conceptDescription").val();
 
 
 serviceName= "mpeg7_semanticbasetype_service";
 methodName ="addNewConceptType";
 parametersAsJSONArray = new Array();
 parametersAsJSONArray[0] = {"type": "String", "value": conceptName};
 parametersAsJSONArray[1] = {"type": "String", "value": conceptDescription};
 
 lasClient.invoke(serviceName, methodName, parametersAsJSONArray, function(status,result){
 
 console.log(result.value);
 var id = result.value;
 
 var durationInSeconds = $("#annotationDuration").val();
 var startTime = $("#playerDurationStartTimeVar").val();
 
 //close the div
  var userName = lasClient.getUsername();
 
 var check = addAnnotationsSegment(id,startTime,durationInSeconds,"ConceptType",conceptName,userName);
if(check == true){
 clearBaseTypeDiv();
 }
 return false;
 
 });
 
 clearBaseTypeDiv();
 return false;
 }
 
 
 
 
 
 function getTimeElementFromPos(type,pos){
 var hour = "00";
 var mins = "00";
 var secs = "00";
 var time = null;
 if (pos>3600){
 hour = Math.floor(pos/3600);
 mins = 0;
 secs = 0;
 secs = pos%3600;
 if (secs>=60){
 mins = Math.floor(secs/60);
 secs = secs%60;
 }
 if (hour<10){
 hour = "0"+hour;
 }
 if (mins<10){
 mins = "0"+mins;
 }
 if (secs<10){
 secs= "0"+secs;
 }
 if (type=="startTime"){
 time = "T"+hour+":"+mins+":"+secs+":000F0000";
 }
 else if (type=="duration"){
 time = "PT"+hour+"H"+mins+"M"+secs+"S";
 }
 
 }
 else{
 mins = Math.floor(pos/60);
 secs = pos%60;
 
 if (mins<10){
 mins = "0"+mins;
 }
 if (secs<10){
 secs= "0"+secs;
 }
 if (type=="startTime"){
 time = "T00:"+mins+":"+secs+":000F0000";
 }
 else if (type=="duration"){
 time = "PT00H"+mins+"M"+secs+"S";
 }
 
 }
 return time;
 }
 
 function addEventType(){
 
 // from here we paste
 eventName = $("#eventName").val();
 
 
 
 serviceName= "mpeg7_semanticbasetype_service";
 methodName ="addNewEventType";
 parametersAsJSONArray = new Array();
 parametersAsJSONArray[0] = {"type": "String", "value": eventName};
 parametersAsJSONArray[1] = {"type": "String", "value": ""};
 parametersAsJSONArray[2] = {"type": "String", "value": ""};
 parametersAsJSONArray[3] = {"type": "String", "value": ""};
 parametersAsJSONArray[4] = {"type": "double", "value": 0.0};
 parametersAsJSONArray[5] = {"type": "double", "value": 0.0};
 parametersAsJSONArray[6] = {"type": "double", "value": 0.0};
 parametersAsJSONArray[7] = {"type": "String", "value": ""};
 parametersAsJSONArray[8] = {"type": "String", "value": ""};
 
 
 lasClient.invoke(serviceName, methodName, parametersAsJSONArray, function(status,result){
 
 console.log(result.value);
 var id = result.value;
 
 var durationInSeconds = $("#annotationDuration").val();
 var startTime = $("#playerDurationStartTimeVar").val();
 
 //close the div
  var userName = lasClient.getUsername();
 
 var check = addAnnotationsSegment(id,startTime,durationInSeconds,"EventType",eventName,userName);
if(check == true){
 clearBaseTypeDiv();
 } return false;
 
 });
 
 clearBaseTypeDiv();
 return false;
 }
 
 
 
 function addObjectType(){
 objectName = $("#objectName").val();
 objectDescription = $("#objectDescription").val();
 
 
 serviceName= "mpeg7_semanticbasetype_service";
 methodName ="addNewObjectType";
 parametersAsJSONArray = new Array();
 parametersAsJSONArray[0] = {"type": "String", "value": objectName};
 parametersAsJSONArray[1] = {"type": "String", "value": objectDescription};
 lasClient.invoke(serviceName, methodName, parametersAsJSONArray, function(status,result){
 
 console.log(result.value);
 var id = result.value;
 
 var durationInSeconds = $("#annotationDuration").val();
 var startTime = $("#playerDurationStartTimeVar").val();
 
 //close the div
  var userName = lasClient.getUsername();
 
var check = addAnnotationsSegment(id,startTime,durationInSeconds,"ObjectType",objectName,userName);
 clearBaseTypeDiv();
 return false;
 
 });
 
 return false;
 
 }
 
 
 
 
 function setDuration(){
 var intent = {
 "component":"",	 
 "action":"ACTION_ADD_DURATION",
 "data":"www.example.org",
 "dataType":"text/html",
 "flags":["PUBLISH_GLOBAL"]
 
 };
 sendIntent(intent);
 console.log("request to add duration was sent");
 
 }
    

    
function updateAudioVisualSegmentsConcept(status, result){
    
    //showLoadingOverlay();
    
    console.log("status of getAudioVisualSegmentsHandler "+status);
    console.log(result.value);
    console.log("starting the parse");
    console.log(result);
    var result1 = result.value;
    var xmlObj = $.parseXML(result1);
    $result1 = $(xmlObj);
    $givenname = $result1.find("GivenName");
    var name = $givenname.text();
    $secondname = $result1.find("FamilyName");
    var fname = $secondname.text();

   
    checkUpdateSemantics = 1;
    console.log("check update semantics set to 1");
    $("#baseTypeCreationContainer").html("");
    
    $('.baseType').css('color', '');
    $(this).css('color', 'blue');
    //call the video widget, pause the player and get annotation time
        var intent = {
        "component":"",
        "action":"ACTION_ANNOTATIONS_GET_TIME_PAUSE",
        "data":"www.example.org",
        "dataType":"text/html",
        "flags":["PUBLISH_GLOBAL"]
        };
        sendIntent(intent);
        var parent = $(this).parent();
        $("#baseTypeCreationContainer").append($("#baseTypeformbox"+7).html());
    
    $("#UpdatePosition").html("");
    $("#PlayerPosition").html("<p style=\"color:blue\">Update Semantics</p>");
    var givenname = $(xmlObj).find('GivenName');
    console.log("given name"+givenname);
    document.getElementById("firstNameAgent").value =  name;
    document.getElementById("lastNameAgent").value = fname;
    document.getElementById("annotationDuration").value = "1";
    document.getElementById("baseType2").disabled = true;
    document.getElementById("baseType3").disabled = true;
    document.getElementById("baseType4").disabled = true;
    jQuery('#firstNameAgent').click(function() { selectAllText(jQuery(this)) });
    jQuery('#lastNameAgent').click(function() { selectAllText(jQuery(this)) });
    jQuery('#annotationDuration').click(function() { selectAllText(jQuery(this)) });
    //hideLoadingOverlay();
    }
 
 function getAudioVisualSegmentsHandler (status, result){
 
 console.log("status of getAudioVisualSegmentsHandler "+status);
 console.log(result.value);
 console.log("starting the parse");
 console.log(result);
 var i = 0; //current index in the vectors above
 //arrays when semantic info for all the segments is stored	
 ids = new Array();
 //arrays containing info about the annotations, that will be used when adding new concepts
 allocations = new Array(); //it will have the same size as the vectors above; each annotation will have an assigned allocation
 uniqueDurations = new Array(); //this might have another size, according to how many different timepoints we have
 uniqueTimepoints = new Array(); //this might have another size, according to how many different timepoints we have
 //bug in the mpge7MultimediaContentService -> setAudioVisualSegmentsWith Duration: the array with unoque durations
 //must have the same length with the array of uniqueTimepoints; that is: one cannot add two annotations
 //starting at the same time point but having different durations
 var uniqueTimepointsIndex = 0; //current index in the uniqueTimepoints and uniqueDurations
 
 var segmentTimepointInOriginalFormat = null;
 var segmentDurationInOriginalFormat = "PT00H00M01S";
 
 
 //for all the segments -> parse them to get annotation information	 
 $.each(result.value, function(index, value) { 
 //we now parse the current segment
 console.log($(value));
 
 xmlObj = $.parseXML(value);
 
 //all the annotations in a segment share the same start time point and the same duration
 
 //we take the start time point of all the annotations defined in this segment	 
 $(xmlObj).find('MediaTimePoint').each(function(){
 var regexp = /T\d\d:\d\d:\d\d:\d\d\dF\d\d\d\d/;
 segmentTimepointInOriginalFormat = $(this).text().match(regexp)[0];
 
 
 });
 
 //we take the duration of all the annotations defined in this segment
 $(xmlObj).find('MediaDuration').each(function(){
 
 if($(this).text()!="undefined"&&$(this).text().length==9){
 var regexp = /PT\d\dH\d\dM\d\dS/;
 segmentDurationInOriginalFormat = $(this).text().match(regexp)[0];
 }
 });
 
 var valueOfAllocation=null;
 var foundIdenticalTimepoint = false;
 if (uniqueTimepoints!= null && uniqueTimepoints!="undefined" && uniqueTimepoints.length!=0){
 jQuery.each(uniqueTimepoints, function(indexUT,valueUT) {
 if (valueUT == segmentTimepointInOriginalFormat){
 foundIdenticalTimepoint = true;
 valueOfAllocation = indexUT;
 }
 
 });
 }	 
 if (!foundIdenticalTimepoint){
 uniqueTimepoints[uniqueTimepointsIndex] = segmentTimepointInOriginalFormat;
 uniqueDurations[uniqueTimepointsIndex] = segmentDurationInOriginalFormat;
 valueOfAllocation = uniqueTimepointsIndex;
 uniqueTimepointsIndex=uniqueTimepointsIndex+1;
 }
 
 
 
 //now we read all the annotations defined in this segment
 $(xmlObj).find('SemanticBaseRef').each(function(){
 
 hrefString = $(this).attr("href");
 console.log($(this).attr("href"));
 var regexp = /id="(.*)"]/;
 var testRE = hrefString.match(regexp);
 
 id = testRE[1];
 
 //we add the info of the current annotation in the arrays containing semantic info 
 ids[i] = id;
 
 allocations[i] = valueOfAllocation;
 i++;
 
 });
 });
 //we send the vectors that are needed when adding new annotations to the addAnnotations widget
 getMediaDescriptionFunction(videourl);
 getMediaTagsFunction(videourl);
 getMediaTitleFunction(videourl);	 
 }
 function onLogin() {
 document.getElementsByClassName("fadeMe")[0].setAttribute("style","display:none");
 }
 
 function onLogout() {
 document.getElementsByClassName("fadeMe")[0].setAttribute("style","display:block");
 }
    function showLoadingOverlay() {
    document.getElementsByClassName("ajaxLoader")[0].setAttribute("style","display:block");
    document.getElementsByClassName("fadeMe")[0].setAttribute("style","display:block");
    }
    function hideLoadingOverlay() {
    document.getElementsByClassName("ajaxLoader")[0].setAttribute("style","display:none");
    document.getElementsByClassName("fadeMe")[0].setAttribute("style","display:none");
    }
    
    function selectAllText(textbox) {
    textbox.focus();
    textbox.select();
    }
 
 gadgets.util.registerOnLoadHandler(init);	 
 
 </script>
 <div style="width:100%"; >
 <!--div style="width:100%; height:100%; -->
 <!-- #1 delete div class="fadeMe" style="display:none"></div-->
 <div class="fadeMe" style="display:none"><img id="ajaxLoader" class="ajaxLoader" src="images/ajax_loader.gif" style="display:none;"></img></div>
 <div id="container" style="width:100%;overflow:hidden;">
 <section>
 <b> Title </b> <br/>
 <span id="title3" class="title"> </span>
 <div id="formbox3" style="display:none">
 <form method="post" name="form">
 <textarea id="editableTitle" name='content' class='content' style="width:100%;"> </textarea><br />
 <input type='button' value=" Save " class="save" onClick="changeTitleTags()"/>
 <input type="button" value=" Cancel " class="cancel"/>
 </form>
 </div>
 
 </section>
 
 <section>
 <br/>
 <!-- empty section -->
 </section>
 
 <section>
 <b> Description </b> <br/>
 <span id="title1" class="title"></span>
 <div id="formbox1" style="display:none">
 <form method="post" name="form">
 <textarea name='content' id="editableDescription" class='content' style="width:100%;"> </textarea><br />
    
 <input type='button' value=" Save " class="save" onClick="changeMediaDescription()"/>
 <input type="button" value=" Cancel " class="cancel"/>
 </form>
 </div>
 </section>
 <section>
 <br/>
 <!-- empty section -->
 </section>
 <section>
 <b> Tags </b> <br/>
 <span id="title2" class="title"> </span>
 
 <div id="formbox2" style="display:none">
 <form method="post" name="form">
 <textarea id="editableTags" name='content' class='content' style="width:100%;"> </textarea><br />
 <input type='button' value=" Save " class="save" onClick="changeMediaTags()"/>
 <input type="button" value=" Cancel " class="cancel"/>
 </form>
 </div>
 
 </section></div><div>
 
 
 
 
 
 <section>
 <br/>
 <!-- empty section -->
 </section>
 
 <section>
 <div id="PlayerPosition"> </div>
 <div id="UpdatePosition"> </div>
 <ul id="annotation_list">
 <li >
 <input type="button" value="Agent" id="baseType1" class="baseType" />
 
 </li>
 <li>
 <input type="button" value="Concept" id="baseType2" class="baseType" />
 </li>
 <li >
 <input type="button" value="Event" id="baseType3" class="baseType" />
 </li>
 <li>
 <input type="button" value="Object" id="baseType4" class="baseType" />	 
 </li>
 <!--
 <li id="baseType5" class="baseType">
 <b> Place </b>
 </li>
 -->
 <!--
 <li id="baseType6" class="baseType">
 <b> Time </b>
 </li>
 -->
 </ul>
 
 <div id="baseTypeCreationContainer">
 </div>
 
 <div id="baseTypeformbox1" style="display:none">
 <form method="post" name="form" id="addAgentTypeForm">
 <table>
 <tr>
 <td>First Name: </td> <td><input type="text" id="firstNameAgent" name='firstNameAgent' class='content' /> </td>
 </tr>
 <tr>
 <td> Last Name: </td> <td> <input type="text" id="lastNameAgent" name='lastNameAgent' class='content' /> </td>
 </tr>
 <tr>
 <td><input type='button' value="Set Duration" onclick='setDuration()' class="baseTypeDuration" /></td>
 <td><input type="text" id="annotationDuration" name='conceptDuration' value="1" class='content' /> </td>	
 </tr>
 </table>
 <table>
 <tr>
 <!--	<td><input type='button' value="change duration" onclick='setDuration()' class="baseTypeDuration" /></td> -->
 <td><input type='button' value=" Save " class="save" onclick='addAgentType()'/> </td>
 <td><input type="button" value=" Cancel " class="baseTypeCancel" onclick='clearBaseTypeDiv()'/> </td>
 </tr>
 </table>
 
 
 </form>
 </div>
 <div id="baseTypeformbox2" style="display:none">
 <form method="post" name="form">
 <table>
 <tr>
 <td>Name:</td> <td><input type="text" id="conceptName" name='conceptName' class='content' /></td>
 </tr>
 <tr>
 <td>Description:</td><td> <input type="text" id="conceptDescription" name='conceptDescription' value="" class='content' /></td>
 </tr>
 <tr>
 <td><input type='button' value="Set Duration" onclick='setDuration()' class="baseTypeDuration" /></td>
 <td><input type="text" id="annotationDuration" name='conceptDuration' value="1" class='content' /> </td>	
 </tr>
 </table>
 <table>
 <tr>
 <!--	<td><input type='button' value="change duration" onclick='setDuration()' class="baseTypeDuration"/></td>	-->	 
 <td><input type='button' value=" Save " class="save" onclick='addConceptType()'/></td>
 <td><input type="button" value=" Cancel " class="baseTypeCancel" onclick='clearBaseTypeDiv()'/></td>
 </tr>
 </table>
 </form>
 </div>
 
 <div id="baseTypeformbox3" style="display:none">
 <form method="post" name="form">
 <table>
 <tr>
 <td>Name:</td><td><input type="text" id="eventName" name='content' class='content' /></td>
 </tr>
 <tr>
 <td><input type='button' value="Set Duration" onclick='setDuration()' class="baseTypeDuration" /></td>
 <td><input type="text" id="annotationDuration" name='conceptDuration' value="1" class='content' /> </td>	
 </tr>
 </table>
 <table>
 <tr>
 <!--<td><input type='button' value="Change Duration" onclick='setDuration()' class="baseTypeDuration"/></td> -->
 <td><input type='button' value=" Save " onclick='addEventType()' class="save" /></td>
 <td><input type="button" value=" Cancel " class="baseTypeCancel" onclick='clearBaseTypeDiv()'/></td>
 </tr>
 </table>
 </form>
 </div>
 
 <div id="baseTypeformbox4" style="display:none">
 <form method="post" name="form">
 <table>
 <tr>
 <td>Name:</td><td><input type="text" id="objectName" name='objectName' class='content' /></td>
 </tr>
 <tr>
 <td>Description:</td> <td><input type="text" id="objectDescription" name='objectDescription' value="" class='content' /> </td>
 </tr>
 <tr>
 <td><input type='button' value="Set Duration" onclick='setDuration()' class="baseTypeDuration" /></td>
 <td><input type="text" id="annotationDuration" name='conceptDuration' value="1" class='content' /> </td>	
 
 </tr>
 </table>
 <table>
 <tr>	 
 
 <td><input type='button' value=" Save " class="save" onclick='addObjectType()' /></td>
 <td><input type="button" value=" Cancel " class="baseTypeCancel" onclick='clearBaseTypeDiv()'/></td>
 </tr>
 </table>
 </form>
 </div>
 
 <!--
 <div id="baseTypeformbox5" style="display:none">
 <form method="post" name="form">
 <table>
 <tr>
 <td>First Name:</td> <td> <input type="text" name='content' class='content' /> </td>
 </tr>
 <tr>
 <td>Last Name: </td> <td><input type="text" name='content' class='content' /> </td>
 </tr>
 <tr>
 <td><input type='button' value="Set Duration" onclick='setDuration()' class="baseTypeDuration" /></td>
 <td><input type="text" id="annotationDuration" name='conceptDuration' value="1" class='content' /> </td>	
 </tr>
 </table>
 <table>
 <tr>
 <td><input type='button' value="Change Duration" onclick='setDuration()' class="baseTypeDuration"/></td>
 <td><input type='button' value=" Save " class="save" /></td>
 <td><input type="button" value=" Cancel " class="baseTypeCancel" onclick='clearBaseTypeDiv()'/></td>
 </tr>
 </table>
 </form>
 </div>
 -->
 <!--
 <div id="baseTypeformbox6" style="display:none;">
 <form method="post" name="form">
 <table>
 <tr>
 <td>Name: </td><td><input type="text" id="timeName" name='timeName' class='content' /> </td>
 </tr> -->
 <!--Description: <input type="text" id="timeDefinition" name='timeDefinition' class='content' /> <br/> -->
 <!--<tr>
 <td>Date: </td> <td><input type="text" id="timePoint" name='timePoint' class='content' /> </td>
 </tr> -->
 <!--Duration: <input type="text" id="timeDuration" name='timeDuration' class='content' /> <br/> -->
 <!--<tr>
 <td>Duration:</td> <td><input type="text" id="annotationDuration" name='conceptDuration' value="1" class='content' /> </td>	
 </tr>-->
 <!--	 </table>
 <table>
 <tr>
 <td><input type='button' value="change duration" onclick='setDuration()' class="baseTypeDuration" /></td>
 
 
 <td><input type='button' value=" Save " class="save" onclick='addTimeType()'/></td>
 <td><input type="button" value=" Cancel " class="baseTypeCancel" onclick='clearBaseTypeDiv()'/></td>
 </tr>
 </table>
 </form>
 </div> -->
    <div id="baseTypeformbox7" style="display:none">
    <form method="post" name="form" id="addAgentTypeForm">
    <table>
    <tr>
    <td>First Name: </td> <td><input type="text" id="firstNameAgent" name='firstNameAgent' class='content' /> </td>
    </tr>
    <tr>
    <td> Last Name: </td> <td> <input type="text" id="lastNameAgent" name='lastNameAgent' class='content' /> </td>
    </tr>
    <tr>
    <td><input type='button' value="Set Duration" onclick='setDuration()' class="baseTypeDuration" /></td>
    <td><input type="text" id="annotationDuration" name='conceptDuration' value="1" class='content' /> </td>
    </tr>
    </table>
    <table>
    <tr>
    <!--	<td><input type='button' value="change duration" onclick='setDuration()' class="baseTypeDuration" /></td> -->
    <td><input type='button' value=" Update " class="save" onclick='addAgentType()'/> </td>
    <td><input type="button" value=" Cancel " class="baseTypeCancel" onclick='clearBaseTypeDiv()'/> </td>
    </tr>
    </table>
    <div id="updateAlert" style="display:none">
    
    <p> update successful </p>
    </div>
    
    </form>
    </div>
   
 <input type="hidden" value="" id="playerDurationStartTimeVar" />
 
 
 </section>
 <div id="q" />


 </div></div>

]]>
</Content>
</Module>
